
% Create an object of the Materials class and read the materials file
mat = Materials(model,listMat(sim));

% Create and set the print utility
printUtils = OutState(model,topology, ...
  fullfile('outTime.dat'), ...
  'folderName','Outputs', ...
  'flagMatFile',true, ...
  'writeVtk',false);

% Create object handling construction of Jacobian and rhs of the model
% linSyst = Discretizer(model,simParam,dofmanager,grid,mat,GaussPts);
domain = Discretizer('ModelType',model,...
  'SimulationParameters',simParam,...
  'DoFManager',dofmanager,...
  'Boundaries',bound,...
  'OutState',printUtils,...
  'Materials',mat,...
  'Grid',grid);

% set initial conditions directly modifying the state object
domain.state.data.pressure = getFluid(mat).getFluidSpecWeight()*(wLev-z);

domain.simparams.setVerbosity(0);

% Solve the problem
Solver = FCSolver(domain);
% Solver = FCSolver(domain,'SaveRelError',true,'SaveBStepInf',true);
[simState] = Solver.NonLinearLoop();

printUtils.finalize();